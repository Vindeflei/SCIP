;;Exercise 1.2
(/(+ 5 4 (- 2 ( - 3 ( + 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))
;;Exercise 1.3
(define (>= a b)(or (> a b)(= a b)))
(define (square x)(* x x))
(define (sum-of-larger-squares a b c)(cond 
                                           ((and (>= a c)(>= b c))(+ (square a) (square b)))
                                           ((and (>= a b)(>= c b))(+(* a a)(* c c)))
                                           ((and (>= b a)(>= c a))(+(* b b)(* c c)))
                                           )
)
(sum-of-larger-squares 2 2 3)
;;Exercise 1.9
(define (A x b)
          (cond ((= b 0) 0)
                ((= x 0)(* b 2))
                ((= b 1) 2)
                (else(A(- x 1)(A x (- b 1))))))
(A 1 10)
(A 2 4)
(A 3 3)
;;Exercise 1.11
(define (f n)
    (cond ((< n 3) n)
          (else (+(f(- n 1))(* 2 (f(- n 2)))(* 3 (f(- n 3))))))
)
(f 1)
(f 2)
(f 3)
(f 4)
(f 5)
;;Exercis 1.12
(define (Pascal x y)
    (cond ((or (= y 1)(= y x)) 1)
            ((or (= y 2)(= y (- x 1))) (- x 1))
            (else (+ (Pascal(- x 1) (- y 1))(Pascal(- x 1) y)))
    )
)
(Pascal 1 1)
(Pascal 3 2)
(Pascal 5 3)
;;Exercise 1.29
(define (cube q)(* q q q))
(define (Simpson f a b n)
    (define h (/ (- b a) n))
    (define (terma x)
        (cond ((or(= x n)(= x 0))(f(+ a (* x h))))
              ((= (remainder x 2) 0)(* 2 (f(+ a (* x h)))))
              (else (* 4 (f(+ a (* x h)))))
          ))
      (define (inc y)(+ y 1))
      (define (sum term c next d)
            (if (> c d)
                 0
                 (+ (term c) (sum term (next c) next d)))
             )
         (* (/ h 3 )(sum terma 0 inc n))
                             )
(Simpson cube 0 1.0 100000)
;;Exercise 1.30
(define (sum term a next b)
    (define (iter a result)
        (if (> a b)
            result
            (iter (next a) (+ result (term a))))
        )
    (iter a 0)
    )
(define (inc x)(+ 1 x))
(sum cube 1 inc 10)
;;Exercise 1.31
(define (identity x) x)
(define (inc y)(+ y 1))
(define (product func a next b)
    (define (iter a result)
        (if (> a b)
            result
            (iter (next a)(* result (func a)))
            )
        )
    (iter a 1)
)
(define (factorial n)(product identity 1 inc n))
;;Exercise 1.32
(define (accumulate combiner null-value func a next b)
    (define (iter a result)
        (if(> a b)
              result
              (iter (next a)(combiner result (func a)))
        )
    )
    (iter a null-value)
)
;;Exercise 1.35 & 36
(define tolerance 0.0000001)
(define (average x y)(/(+ x y) 2))
(define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
         (newline)
         (display next)
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(fixed-point
    (lambda (x)
        (+ 1 (/ 1 x)))
    1.0)
(fixed-point
    (lambda (x)
        (average x (/ (log 1000) (log x))))
    1.5)
;;Exercise 1.41
(define (double f)
    (lambda (x)
        (f (f x))
    )
)
(((double (double double)) inc) 5)
;;Exercise 1.42
(define (compose f g)
    (lambda (x)
        (f(g x))
    )
)
((compose square inc) 6)
;;Exercise 1.43
(define (repeated f n)
    (if (= n 1)
        f
        (compose (repeated  f (- n 1)) f)
    )
)
((repeated square 3) 5)
;;Exercise 1.44
(define (average x y z)
    (/ (+ x y z) 3)
)
(define (smooth f)
    (lambda (x)(average (f x) (f (+ x .0000001))(f (- x .0000001))))
)
(define (nth-smooth f n)
    ((repeated smooth n) f)
)